// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createOrganizationStmt, err = db.PrepareContext(ctx, createOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrganization: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWebhookStmt, err = db.PrepareContext(ctx, createWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWebhook: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getAllWebhooksStmt, err = db.PrepareContext(ctx, getAllWebhooks); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllWebhooks: %w", err)
	}
	if q.getOrganizationStmt, err = db.PrepareContext(ctx, getOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrganization: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getWebhookStmt, err = db.PrepareContext(ctx, getWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query GetWebhook: %w", err)
	}
	if q.updateOrganizationStmt, err = db.PrepareContext(ctx, updateOrganization); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrganization: %w", err)
	}
	if q.updateOrganizationAvatarStmt, err = db.PrepareContext(ctx, updateOrganizationAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrganizationAvatar: %w", err)
	}
	if q.updateOrganizationPlanStmt, err = db.PrepareContext(ctx, updateOrganizationPlan); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrganizationPlan: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserAvatarStmt, err = db.PrepareContext(ctx, updateUserAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserAvatar: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	if q.updateWebhookStmt, err = db.PrepareContext(ctx, updateWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWebhook: %w", err)
	}
	if q.updateWebhookRetryPolicyStmt, err = db.PrepareContext(ctx, updateWebhookRetryPolicy); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWebhookRetryPolicy: %w", err)
	}
	if q.updateWebhookSecretStmt, err = db.PrepareContext(ctx, updateWebhookSecret); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWebhookSecret: %w", err)
	}
	if q.updateWebhookStatusStmt, err = db.PrepareContext(ctx, updateWebhookStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWebhookStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createOrganizationStmt != nil {
		if cerr := q.createOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrganizationStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWebhookStmt != nil {
		if cerr := q.createWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWebhookStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getAllWebhooksStmt != nil {
		if cerr := q.getAllWebhooksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllWebhooksStmt: %w", cerr)
		}
	}
	if q.getOrganizationStmt != nil {
		if cerr := q.getOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrganizationStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getWebhookStmt != nil {
		if cerr := q.getWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWebhookStmt: %w", cerr)
		}
	}
	if q.updateOrganizationStmt != nil {
		if cerr := q.updateOrganizationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrganizationStmt: %w", cerr)
		}
	}
	if q.updateOrganizationAvatarStmt != nil {
		if cerr := q.updateOrganizationAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrganizationAvatarStmt: %w", cerr)
		}
	}
	if q.updateOrganizationPlanStmt != nil {
		if cerr := q.updateOrganizationPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrganizationPlanStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserAvatarStmt != nil {
		if cerr := q.updateUserAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserAvatarStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	if q.updateWebhookStmt != nil {
		if cerr := q.updateWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWebhookStmt: %w", cerr)
		}
	}
	if q.updateWebhookRetryPolicyStmt != nil {
		if cerr := q.updateWebhookRetryPolicyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWebhookRetryPolicyStmt: %w", cerr)
		}
	}
	if q.updateWebhookSecretStmt != nil {
		if cerr := q.updateWebhookSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWebhookSecretStmt: %w", cerr)
		}
	}
	if q.updateWebhookStatusStmt != nil {
		if cerr := q.updateWebhookStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWebhookStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createOrganizationStmt       *sql.Stmt
	createUserStmt               *sql.Stmt
	createWebhookStmt            *sql.Stmt
	getAllUsersStmt              *sql.Stmt
	getAllWebhooksStmt           *sql.Stmt
	getOrganizationStmt          *sql.Stmt
	getUserStmt                  *sql.Stmt
	getWebhookStmt               *sql.Stmt
	updateOrganizationStmt       *sql.Stmt
	updateOrganizationAvatarStmt *sql.Stmt
	updateOrganizationPlanStmt   *sql.Stmt
	updateUserStmt               *sql.Stmt
	updateUserAvatarStmt         *sql.Stmt
	updateUserRoleStmt           *sql.Stmt
	updateWebhookStmt            *sql.Stmt
	updateWebhookRetryPolicyStmt *sql.Stmt
	updateWebhookSecretStmt      *sql.Stmt
	updateWebhookStatusStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createOrganizationStmt:       q.createOrganizationStmt,
		createUserStmt:               q.createUserStmt,
		createWebhookStmt:            q.createWebhookStmt,
		getAllUsersStmt:              q.getAllUsersStmt,
		getAllWebhooksStmt:           q.getAllWebhooksStmt,
		getOrganizationStmt:          q.getOrganizationStmt,
		getUserStmt:                  q.getUserStmt,
		getWebhookStmt:               q.getWebhookStmt,
		updateOrganizationStmt:       q.updateOrganizationStmt,
		updateOrganizationAvatarStmt: q.updateOrganizationAvatarStmt,
		updateOrganizationPlanStmt:   q.updateOrganizationPlanStmt,
		updateUserStmt:               q.updateUserStmt,
		updateUserAvatarStmt:         q.updateUserAvatarStmt,
		updateUserRoleStmt:           q.updateUserRoleStmt,
		updateWebhookStmt:            q.updateWebhookStmt,
		updateWebhookRetryPolicyStmt: q.updateWebhookRetryPolicyStmt,
		updateWebhookSecretStmt:      q.updateWebhookSecretStmt,
		updateWebhookStatusStmt:      q.updateWebhookStatusStmt,
	}
}
