// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type PlanType string

const (
	PlanTypeFree       PlanType = "free"
	PlanTypeStarter    PlanType = "starter"
	PlanTypePro        PlanType = "pro"
	PlanTypeEnterprise PlanType = "enterprise"
)

func (e *PlanType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlanType(s)
	case string:
		*e = PlanType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlanType: %T", src)
	}
	return nil
}

type NullPlanType struct {
	PlanType PlanType `json:"plan_type"`
	Valid    bool     `json:"valid"` // Valid is true if PlanType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlanType) Scan(value interface{}) error {
	if value == nil {
		ns.PlanType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlanType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlanType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlanType), nil
}

type QueueType string

const (
	QueueTypeFifo     QueueType = "fifo"
	QueueTypeStandard QueueType = "standard"
)

func (e *QueueType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QueueType(s)
	case string:
		*e = QueueType(s)
	default:
		return fmt.Errorf("unsupported scan type for QueueType: %T", src)
	}
	return nil
}

type NullQueueType struct {
	QueueType QueueType `json:"queue_type"`
	Valid     bool      `json:"valid"` // Valid is true if QueueType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQueueType) Scan(value interface{}) error {
	if value == nil {
		ns.QueueType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QueueType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQueueType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QueueType), nil
}

type UserRole string

const (
	UserRoleOwner  UserRole = "owner"
	UserRoleAdmin  UserRole = "admin"
	UserRoleMember UserRole = "member"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Organization struct {
	ID        string          `json:"id"`
	Name      string          `json:"name"`
	Avatar    sql.NullString  `json:"avatar"`
	Plan      PlanType        `json:"plan"`
	Settings  json.RawMessage `json:"settings"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

type User struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Email          string         `json:"email"`
	Username       string         `json:"username"`
	Avatar         sql.NullString `json:"avatar"`
	Role           UserRole       `json:"role"`
	OrganizationID string         `json:"organization_id"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

type Webhook struct {
	ID             string          `json:"id"`
	Label          string          `json:"label"`
	Endpoint       string          `json:"endpoint"`
	Enabled        bool            `json:"enabled"`
	Delay          int32           `json:"delay"`
	Concurrency    int32           `json:"concurrency"`
	Queue          QueueType       `json:"queue"`
	RetryPolicy    json.RawMessage `json:"retry_policy"`
	OrganizationID string          `json:"organization_id"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	Secret         string          `json:"secret"`
}
