// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organization.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations
	(id, name, plan, settings)
VALUES
	($1, $2, $3, $4)
RETURNING id, name, avatar, plan, settings, created_at, updated_at, deleted_at
`

type CreateOrganizationParams struct {
	ID       string          `json:"id"`
	Name     string          `json:"name"`
	Plan     PlanType        `json:"plan"`
	Settings json.RawMessage `json:"settings"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.queryRow(ctx, q.createOrganizationStmt, createOrganization,
		arg.ID,
		arg.Name,
		arg.Plan,
		arg.Settings,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Plan,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, plan, settings, created_at, updated_at FROM organizations
WHERE
	id = $1 AND deleted_at IS NULL
`

type GetOrganizationRow struct {
	ID        string          `json:"id"`
	Name      string          `json:"name"`
	Plan      PlanType        `json:"plan"`
	Settings  json.RawMessage `json:"settings"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

func (q *Queries) GetOrganization(ctx context.Context, id string) (GetOrganizationRow, error) {
	row := q.queryRow(ctx, q.getOrganizationStmt, getOrganization, id)
	var i GetOrganizationRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Plan,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteOrganization = `-- name: SoftDeleteOrganization :exec
UPDATE organizations
SET
	deleted_at = now()
WHERE
	id = $1
`

func (q *Queries) SoftDeleteOrganization(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.softDeleteOrganizationStmt, softDeleteOrganization, id)
	return err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET
	name = $2,
	plan = $3,
	settings = $4,
	updated_at = now()
WHERE
	id = $1 AND deleted_at IS NULL
RETURNING id, name, avatar, plan, settings, created_at, updated_at, deleted_at
`

type UpdateOrganizationParams struct {
	ID       string          `json:"id"`
	Name     string          `json:"name"`
	Plan     PlanType        `json:"plan"`
	Settings json.RawMessage `json:"settings"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.queryRow(ctx, q.updateOrganizationStmt, updateOrganization,
		arg.ID,
		arg.Name,
		arg.Plan,
		arg.Settings,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Plan,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateOrganizationAvatar = `-- name: UpdateOrganizationAvatar :exec
UPDATE organizations
SET
	avatar = $2,
	updated_at = now()
WHERE
	id = $1 AND deleted_at IS NULL
`

type UpdateOrganizationAvatarParams struct {
	ID     string         `json:"id"`
	Avatar sql.NullString `json:"avatar"`
}

func (q *Queries) UpdateOrganizationAvatar(ctx context.Context, arg UpdateOrganizationAvatarParams) error {
	_, err := q.exec(ctx, q.updateOrganizationAvatarStmt, updateOrganizationAvatar, arg.ID, arg.Avatar)
	return err
}

const updateOrganizationPlan = `-- name: UpdateOrganizationPlan :exec
UPDATE organizations
SET
	plan = $2,
	settings = $3,
	updated_at = now()
WHERE
	id = $1 AND deleted_at IS NULL
`

type UpdateOrganizationPlanParams struct {
	ID       string          `json:"id"`
	Plan     PlanType        `json:"plan"`
	Settings json.RawMessage `json:"settings"`
}

func (q *Queries) UpdateOrganizationPlan(ctx context.Context, arg UpdateOrganizationPlanParams) error {
	_, err := q.exec(ctx, q.updateOrganizationPlanStmt, updateOrganizationPlan, arg.ID, arg.Plan, arg.Settings)
	return err
}
