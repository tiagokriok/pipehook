// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
	(id, name, email, username, role, organization_id)
VALUES
	($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, username, avatar, role, organization_id, created_at, updated_at
`

type CreateUserParams struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Email          string   `json:"email"`
	Username       string   `json:"username"`
	Role           UserRole `json:"role"`
	OrganizationID string   `json:"organization_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.Role,
		arg.OrganizationID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.Role,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, username, role, avatar, created_at, updated_at FROM users
WHERE
	organization_id = $1
ORDER BY created_at
`

type GetAllUsersRow struct {
	ID        string         `json:"id"`
	Name      string         `json:"name"`
	Email     string         `json:"email"`
	Username  string         `json:"username"`
	Role      UserRole       `json:"role"`
	Avatar    sql.NullString `json:"avatar"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context, organizationID string) ([]GetAllUsersRow, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Username,
			&i.Role,
			&i.Avatar,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, username, role, avatar, created_at, updated_at FROM users
WHERE
	id = $1 AND organization_id = $2
`

type GetUserParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
}

type GetUserRow struct {
	ID        string         `json:"id"`
	Name      string         `json:"name"`
	Email     string         `json:"email"`
	Username  string         `json:"username"`
	Role      UserRole       `json:"role"`
	Avatar    sql.NullString `json:"avatar"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, arg.ID, arg.OrganizationID)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Role,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
	name = $3,
	email = $4,
	username = $5,
	updated_at = now()
WHERE
	id = $1 AND organization_id = $2
RETURNING id, name, email, username, avatar, role, organization_id, created_at, updated_at
`

type UpdateUserParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
	Name           string `json:"name"`
	Email          string `json:"email"`
	Username       string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.Role,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
SET
	avatar = $3,
	updated_at = now()
WHERE
	id = $1 AND organization_id = $2
`

type UpdateUserAvatarParams struct {
	ID             string         `json:"id"`
	OrganizationID string         `json:"organization_id"`
	Avatar         sql.NullString `json:"avatar"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.exec(ctx, q.updateUserAvatarStmt, updateUserAvatar, arg.ID, arg.OrganizationID, arg.Avatar)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users
SET
	role = $3,
	updated_at = now()
WHERE
	id = $1 AND organization_id = $2
`

type UpdateUserRoleParams struct {
	ID             string   `json:"id"`
	OrganizationID string   `json:"organization_id"`
	Role           UserRole `json:"role"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.exec(ctx, q.updateUserRoleStmt, updateUserRole, arg.ID, arg.OrganizationID, arg.Role)
	return err
}
