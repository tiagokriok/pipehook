// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhook.sql

package sqlc

import (
	"context"
	"encoding/json"
	"time"
)

const createWebhook = `-- name: CreateWebhook :one
INSERT INTO webhooks
	(id, label, endpoint, enabled, delay, concurrency, queue, retry_policy, organization_id, secret)
VALUES
	($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, label, endpoint, enabled, delay, concurrency, queue, retry_policy, organization_id, created_at, updated_at, secret, deleted_at
`

type CreateWebhookParams struct {
	ID             string          `json:"id"`
	Label          string          `json:"label"`
	Endpoint       string          `json:"endpoint"`
	Enabled        bool            `json:"enabled"`
	Delay          int32           `json:"delay"`
	Concurrency    int32           `json:"concurrency"`
	Queue          QueueType       `json:"queue"`
	RetryPolicy    json.RawMessage `json:"retry_policy"`
	OrganizationID string          `json:"organization_id"`
	Secret         string          `json:"secret"`
}

func (q *Queries) CreateWebhook(ctx context.Context, arg CreateWebhookParams) (Webhook, error) {
	row := q.queryRow(ctx, q.createWebhookStmt, createWebhook,
		arg.ID,
		arg.Label,
		arg.Endpoint,
		arg.Enabled,
		arg.Delay,
		arg.Concurrency,
		arg.Queue,
		arg.RetryPolicy,
		arg.OrganizationID,
		arg.Secret,
	)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.Label,
		&i.Endpoint,
		&i.Enabled,
		&i.Delay,
		&i.Concurrency,
		&i.Queue,
		&i.RetryPolicy,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Secret,
		&i.DeletedAt,
	)
	return i, err
}

const getAllWebhooks = `-- name: GetAllWebhooks :many
SELECT id, label, endpoint, enabled, delay, concurrency, queue, retry_policy, organization_id, created_at, updated_at FROM webhooks
WHERE
	organization_id = $1 AND deleted_at IS NULL
ORDER BY created_at
`

type GetAllWebhooksRow struct {
	ID             string          `json:"id"`
	Label          string          `json:"label"`
	Endpoint       string          `json:"endpoint"`
	Enabled        bool            `json:"enabled"`
	Delay          int32           `json:"delay"`
	Concurrency    int32           `json:"concurrency"`
	Queue          QueueType       `json:"queue"`
	RetryPolicy    json.RawMessage `json:"retry_policy"`
	OrganizationID string          `json:"organization_id"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetAllWebhooks(ctx context.Context, organizationID string) ([]GetAllWebhooksRow, error) {
	rows, err := q.query(ctx, q.getAllWebhooksStmt, getAllWebhooks, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllWebhooksRow{}
	for rows.Next() {
		var i GetAllWebhooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Label,
			&i.Endpoint,
			&i.Enabled,
			&i.Delay,
			&i.Concurrency,
			&i.Queue,
			&i.RetryPolicy,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebhook = `-- name: GetWebhook :one
SELECT id, label, endpoint, enabled, delay, concurrency, queue, retry_policy, organization_id, created_at, updated_at FROM webhooks
WHERE
	id = $1 AND organization_id = $2 AND deleted_at IS NULL
`

type GetWebhookParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
}

type GetWebhookRow struct {
	ID             string          `json:"id"`
	Label          string          `json:"label"`
	Endpoint       string          `json:"endpoint"`
	Enabled        bool            `json:"enabled"`
	Delay          int32           `json:"delay"`
	Concurrency    int32           `json:"concurrency"`
	Queue          QueueType       `json:"queue"`
	RetryPolicy    json.RawMessage `json:"retry_policy"`
	OrganizationID string          `json:"organization_id"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

func (q *Queries) GetWebhook(ctx context.Context, arg GetWebhookParams) (GetWebhookRow, error) {
	row := q.queryRow(ctx, q.getWebhookStmt, getWebhook, arg.ID, arg.OrganizationID)
	var i GetWebhookRow
	err := row.Scan(
		&i.ID,
		&i.Label,
		&i.Endpoint,
		&i.Enabled,
		&i.Delay,
		&i.Concurrency,
		&i.Queue,
		&i.RetryPolicy,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteWebhook = `-- name: SoftDeleteWebhook :exec
UPDATE webhooks
SET
	deleted_at = now()
WHERE
	id = $1 AND organization_id = $2
`

type SoftDeleteWebhookParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
}

func (q *Queries) SoftDeleteWebhook(ctx context.Context, arg SoftDeleteWebhookParams) error {
	_, err := q.exec(ctx, q.softDeleteWebhookStmt, softDeleteWebhook, arg.ID, arg.OrganizationID)
	return err
}

const updateWebhook = `-- name: UpdateWebhook :one
UPDATE webhooks
SET
	label = $3,
	endpoint = $4,
	enabled = $5,
	delay = $6,
	concurrency = $7,
	queue = $8,
	retry_policy = $9,
	updated_at = now()
WHERE
	id = $1 AND organization_id = $2 AND deleted_at IS NULL
RETURNING id, label, endpoint, enabled, delay, concurrency, queue, retry_policy, organization_id, created_at, updated_at, secret, deleted_at
`

type UpdateWebhookParams struct {
	ID             string          `json:"id"`
	OrganizationID string          `json:"organization_id"`
	Label          string          `json:"label"`
	Endpoint       string          `json:"endpoint"`
	Enabled        bool            `json:"enabled"`
	Delay          int32           `json:"delay"`
	Concurrency    int32           `json:"concurrency"`
	Queue          QueueType       `json:"queue"`
	RetryPolicy    json.RawMessage `json:"retry_policy"`
}

func (q *Queries) UpdateWebhook(ctx context.Context, arg UpdateWebhookParams) (Webhook, error) {
	row := q.queryRow(ctx, q.updateWebhookStmt, updateWebhook,
		arg.ID,
		arg.OrganizationID,
		arg.Label,
		arg.Endpoint,
		arg.Enabled,
		arg.Delay,
		arg.Concurrency,
		arg.Queue,
		arg.RetryPolicy,
	)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.Label,
		&i.Endpoint,
		&i.Enabled,
		&i.Delay,
		&i.Concurrency,
		&i.Queue,
		&i.RetryPolicy,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Secret,
		&i.DeletedAt,
	)
	return i, err
}

const updateWebhookRetryPolicy = `-- name: UpdateWebhookRetryPolicy :exec
UPDATE webhooks
SET
	retry_policy = $3
WHERE
	id = $1 AND organization_id = $2 AND deleted_at IS NULL
`

type UpdateWebhookRetryPolicyParams struct {
	ID             string          `json:"id"`
	OrganizationID string          `json:"organization_id"`
	RetryPolicy    json.RawMessage `json:"retry_policy"`
}

func (q *Queries) UpdateWebhookRetryPolicy(ctx context.Context, arg UpdateWebhookRetryPolicyParams) error {
	_, err := q.exec(ctx, q.updateWebhookRetryPolicyStmt, updateWebhookRetryPolicy, arg.ID, arg.OrganizationID, arg.RetryPolicy)
	return err
}

const updateWebhookSecret = `-- name: UpdateWebhookSecret :exec
UPDATE webhooks
SET
	secret = $3
WHERE
	id = $1 AND organization_id = $2 AND deleted_at IS NULL
`

type UpdateWebhookSecretParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
	Secret         string `json:"secret"`
}

func (q *Queries) UpdateWebhookSecret(ctx context.Context, arg UpdateWebhookSecretParams) error {
	_, err := q.exec(ctx, q.updateWebhookSecretStmt, updateWebhookSecret, arg.ID, arg.OrganizationID, arg.Secret)
	return err
}

const updateWebhookStatus = `-- name: UpdateWebhookStatus :exec
UPDATE webhooks
SET
	enabled = $3
WHERE
	id = $1 AND organization_id = $2 AND deleted_at IS NULL
`

type UpdateWebhookStatusParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
	Enabled        bool   `json:"enabled"`
}

func (q *Queries) UpdateWebhookStatus(ctx context.Context, arg UpdateWebhookStatusParams) error {
	_, err := q.exec(ctx, q.updateWebhookStatusStmt, updateWebhookStatus, arg.ID, arg.OrganizationID, arg.Enabled)
	return err
}
